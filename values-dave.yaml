## Variable für dave-backend
daveBackend:
  ## Alle Namen der Openshift Objekte werden aus dem Namen der Anwendung und der Umgebung zusammengesetzt:  applicationName-applicationEnv
  ## Name der Anwendung.
  ## Beispiel - applicationName: "mypp"
  applicationName: "dave-backend"

  ## Name der Umgebung.
  ## Beispiel - applicationEnv: "dev"
  applicationEnv: "dev"

  ## Setzt die aktiven Spring Profiles.
  ## Wird für die Umgebungsvariable SPRING_PROFILES_ACTIVE der Anwendung verwendet,
  ## siehe hier: https://git.muenchen.de/ccse/cicd/helm-template/-/blob/main/values.yaml#L61
  ## Beispiel - springProfilesActive: "openshift,dev,no-security"
  springProfilesActive: "{{ .Values.daveBackend.applicationEnv }}"

  ## Wert für das label 'app'. Die Openshift Objekte können darüber gesucht werden (z.B. app=application-label)
  ## Beispiel - applicationLoabe: "myApp-dev"
  applicationLabel: "{{ .Values.daveBackend.applicationName }}-{{ .Values.daveBackend.applicationEnv }}"

  #############################################
  # Deployment Parameter                      #
  #############################################
  deploy:
    ## Anzahl der zu startenden replicas (pods).
    ## Weitere Informationen: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#replicas
    ## Im Template: https://git.muenchen.de/ccse/cicd/helm/helm-template/-/blob/main/templates/deployment.yaml#L8
    replicas: 1

    annotations:
      ## Opensource-Projekte zum automatischen Rollout von Images.
      ## Weitere Informationen: https://docs.openshift.com/container-platform/4.14/openshift_images/triggering-updates-on-imagestream-changes.html
      # image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"{{tpl .Values.deploy.image .}}"},"fieldPath":"spec.template.spec.containers[?(@.name==\"{{ .Values.applicationName }}-{{ .Values.applicationEnv }}\")].image"}]'
    ## Angabe des Images. Bei Opensource Projekten bitte ändern.
    image: "itatm/dave-backend:latest"
  
    ## env Absatz. Alle Key-Value-Paare sind Umgebungsvariablen im Pod. Weitere Werte können hinzugefügt werden.
    ## Weitere Informationen: https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
    ## Im Template: https://git.muenchen.de/ccse/cicd/helm/helm-template/-/blob/main/deployment.yaml#L44
    env:
      ## Aktive Spring Profiles der Anwendung werden über den Parameter springProfilesActive festgelegt.
      SPRING_PROFILES_ACTIVE: "{{ tpl .Values.daveBackend.springProfilesActive . }}"
      ## Erhöhe Default JVM Metaspace Size (100 MB) um OutOfMemoryError - Metaspace zu verhindern
      GC_MAX_METASPACE_SIZE: "200"
      ## Java Optionen der Anwendung
      JAVA_OPTS_APPEND: ""
      ## Default Timezone
      TZ: Europe/Berlin
      # Namespace für Hazelcasst
      APP_SPRING-SESSION-HAZELCAST_NAMESPACE: "{{.Release.Namespace}}"
      ## APP Dynamics Variablen
      ## evtl. das obere JAVA_OPTS_APPEND entfernen
      #JAVA_OPTS_APPEND: >-
      #  -javaagent:/appd/javaagent.jar 
      #  -Dappdynamics.jvm.shutdown.mark.node.as.historical=true 
      #  -Dappdynamics.http.proxyHost=internet-proxy-server.muenchen.de 
      #  -Dappdynamics.http.proxyPort=80
      #APPDYNAMICS_AGENT_APPLICATION_NAME: "{{.Release.Namespace}}-{{ .Values.applicationEnv }}"
      #APPDYNAMICS_AGENT_TIER_NAME: "{{ .Values.applicationName }}"
      #APPDYNAMICS_CONTROLLER_HOST_NAME: "lhm-itm.saas.appdynamics.com"
      #APPDYNAMICS_CONTROLLER_PORT: "443"
      #APPDYNAMICS_CONTROLLER_SSL_ENABLED: "true"
      #APPDYNAMICS_USE_SIMPLE_HOSTNAME: "true"



    # bestimmte SecretKeys in Variable umwandeln
    #envWithSecrets:
    #  - name: APP_KPSKATASTEREAI_USERNAME # Variablen Name im Deployment
    #    valueFrom:
    #      secretKeyRef:
    #        name: kps-demo-secret # Secret Ref
    #        key: kpskatastereai-username # Key im Secret

    # bestimmte ConfigMapKeys in Variable umwandeln
    #envWithConfigMap:
    #  - name: APP_KPSKATASTEREAI_USERNAME # Variablen Name im Deployment
    #    valueFrom:
    #      configMapRef:
    #        name: kps-demo-secret # ConfigMap Ref
    #        key: kpskatastereai-username # Key im ConfigMap

    ## envFrom Absatz. Alle in einem Secret oder einer ConfigMap konfigurierten Werte werden zu Umgebungsvariablen des Pod.
    ## Weitere Informationen für
    ## Secrets: https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/#configure-all-key-value-pairs-in-a-secret-as-container-environment-variables
    ## ConfigMaps: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#configure-all-key-value-pairs-in-a-configmap-as-container-environment-variables
    ## Im Template: https://git.muenchen.de/ccse/cicd/helm-template/-/blob/main/templates/deployment.yaml#L40
    envFrom:
      ## Beispielkonfiguration: Environment Variables eines Secrets
      # - secretRef:
      #     name: softwarefreigabe-dev
      ## Beispielkonfiguration: Environment Variables einer ConfigMap
      # - configMapRef:
      #     name: softwarefreigabe-dev

    ## Beliebige Volume Mounts. Es können weitere hinzugefügt werden, die unter deploy.volumes konfiguriert werden,
    ## siehe https://git.muenchen.de/ccse/cicd/helm/helm-template/-/blob/main/values.yaml#L93.
    ## Weitere Informationen: https://kubernetes.io/docs/concepts/storage/volumes/
    ## Im Template: https://git.muenchen.de/ccse/cicd/helm-template/-/blob/main/templates/deployment.yaml#L95
    volumeMounts: {}

    ## Beliebige Volumes. Es können weitere hinzugefügt werden und über deploy.volumeMounts im Pod geladen werden,
    ## siehe siehe https://git.muenchen.de/ccse/cicd/helm/helm-template/-/blob/main/values.yaml#L83.
    ## Weitere Infos: https://kubernetes.io/docs/concepts/storage/volumes/
    ## Im Template: https://git.muenchen.de/ccse/cicd/helm-template/-/blob/main/templates/deployment.yaml#L108
    volumes: {}

    ## Resourcen für die Anwendung. Die Werte können bei Bedarf geändert werden.
    ## Weitere Infos: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    ## Im Template: https://git.muenchen.de/ccse/cicd/helm-template/-/blob/main/templates/deployment.yaml#L88 ff.
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 50m
        memory: 512Mi

    ## Wird benötigt, um eine Anwendung hochverfügbar zu machen.
    ## Weitere Infos: https://git.muenchen.de/ccse/cookbook/-/wikis/spring#gracefull-shutdown-in-spring
    ## Im Template: https://git.muenchen.de/ccse/cicd/helm/helm-template/-/blob/main/templates/deployment.yaml#L67
    lifecycle:
      preStop:
        sleep: 10

    ## StartupProbe
    startupProbe:
      httpGet:
        path: /actuator/health/liveness
        port: 8080
        scheme: HTTP
      failureThreshold: 30
      periodSeconds: 10

    ## Prüft regelmäßig, ob der Pod (die Anwendung) läuft
    ## Weitere Infos: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    ## Im Template: https://git.muenchen.de/ccse/cicd/helm/helm-template/-/blob/main/templates/deployment.yaml#L68 ff.
    livenessProbe:
      failureThreshold: 5
      httpGet:
        path: /actuator/health/liveness
        port: 8080
        scheme: HTTP
      initialDelaySeconds: 60
      periodSeconds: 20
      successThreshold: 1
      timeoutSeconds: 1

    ## Prüft, ob der Pod (die Anwendung) korrekt startet
    ## Weitere Infos: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    ## Im Template: https://git.muenchen.de/ccse/cicd/helm/helm-template/-/blob/main/templates/deployment.yaml#L78 ff.
    readinessProbe:
      failureThreshold: 5
      httpGet:
        path: /actuator/health/readiness
        port: 8080
        scheme: HTTP
      initialDelaySeconds: 60
      periodSeconds: 20
      successThreshold: 1
      timeoutSeconds: 1

  #############################################
  # Route Parameter                           #
  #############################################
  ## Für einen Zugriff auf die Pods (die Anwendung) außerhalb von Openshift werden Routen angelegt.
  ## Weitere Infos: https://docs.openshift.com/container-platform/4.10/networking/routes/route-configuration.html
  route:
    ## enabled: true legt eine Route für den Service an.
    ## Im Template: https://git.muenchen.de/ccse/cicd/helm-template/-/blob/main/templates/route.yaml#L1
    enabled: false
    ## Angabe des Route Pfads. So können mehrere Sevices unter der gleichen URL verfügbar sein.
    ## Im Template: https://git.muenchen.de/ccse/cicd/helm-template/-/blob/main/templates/route.yaml#L14
    path: /
    ## hosturl wird nur bei Vanity URLs angegeben, bei WildCard Routen keine Angabe machen
    ## Weitere Infos: https://git.muenchen.de/openshift/openshift-configs/-/wikis/Routen#vanity-url
    ## Im Template: https://git.muenchen.de/ccse/cicd/helm-template/-/blob/main/templates/route.yaml#L14
    #hosturl: example.muenchen.de

    ## Spezielle Konfiguration für die Route, z.B. Whitelisting oder Cookie-Einstellungen
    ## Weitere Informationen: https://docs.openshift.com/container-platform/4.10/networking/routes/route-configuration.html#nw-route-specific-annotations_route-configuration
    ## Im Template: https://git.muenchen.de/ccse/cicd/helm-template/-/blob/main/templates/route.yaml#L10
    annotations:
      ## EAI Whitelisting
      ## Weitere Informationen: https://git.muenchen.de/openshift/openshift-configs/-/wikis/Routen#whitelisting
      #haproxy.router.openshift.io/ip_whitelist: 0.0.0.0

    ## Gibt an, ob die Route TLS (HTTPS) benutzen soll und wie es konfiguriert wird.
    ## Siehe Openshift API Reference für mögliche Werte von termination und insecureEdgeTerminationPolicy:
    ## https://docs.openshift.com/container-platform/4.10/networking/routes/secured-routes.html
    ## Im Template: https://git.muenchen.de/ccse/cicd/helm-template/-/blob/main/templates/route.yaml#L18 ff.
    tls:
      enabled: true
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
